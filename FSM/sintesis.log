
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-zWLHjG/yosys-0.7=. -fstack-protector-strong -fPIC -Os)


-- Executing script file `sintesis.ys' --

1. Executing Verilog-2005 frontend.
Parsing Verilog input from `fsm_Control.v' to AST representation.
Generating RTLIL representation for module `\fsmControl'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \fsmControl

2.2. Analyzing design hierarchy..
Top module:  \fsmControl
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.3. Executing PROC_INIT pass (extract init attributes).

3.4. Executing PROC_ARST pass (detect async resets in processes).

3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\fsmControl.$proc$fsm_Control.v:43$1'.
     1/22: $0\error_out[4:0] [4]
     2/22: $0\error_out[4:0] [3]
     3/22: $0\error_out[4:0] [0]
     4/22: $0\error_out[4:0] [1]
     5/22: $0\error_out[4:0] [2]
     6/22: $0\error_out_4[0:0]
     7/22: $0\error_out_3[0:0]
     8/22: $0\error_out_2[0:0]
     9/22: $0\error_out_1[0:0]
    10/22: $0\error_out_0[0:0]
    11/22: $0\nxt_umbrales[13:0]
    12/22: $0\nxt_state[4:0]
    13/22: $0\state[4:0]
    14/22: $0\nxt_umbral_VC1[3:0]
    15/22: $0\nxt_umbral_VC0[3:0]
    16/22: $0\nxt_umbral_D1[1:0]
    17/22: $0\nxt_umbral_D0[1:0]
    18/22: $0\nxt_umbral_MF[1:0]
    19/22: $0\error_out_w[4:0]
    20/22: $0\idle_out[0:0]
    21/22: $0\active_out[0:0]
    22/22: $0\umbrales_I[13:0]

3.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\fsmControl.\umbrales_I' using process `\fsmControl.$proc$fsm_Control.v:43$1'.
  created $dff cell `$procdff$392' with positive edge clock.
Creating register for signal `\fsmControl.\active_out' using process `\fsmControl.$proc$fsm_Control.v:43$1'.
  created $dff cell `$procdff$393' with positive edge clock.
Creating register for signal `\fsmControl.\idle_out' using process `\fsmControl.$proc$fsm_Control.v:43$1'.
  created $dff cell `$procdff$394' with positive edge clock.
Creating register for signal `\fsmControl.\error_out' using process `\fsmControl.$proc$fsm_Control.v:43$1'.
  created $dff cell `$procdff$395' with positive edge clock.
Creating register for signal `\fsmControl.\nxt_umbral_MF' using process `\fsmControl.$proc$fsm_Control.v:43$1'.
  created $dff cell `$procdff$396' with positive edge clock.
Creating register for signal `\fsmControl.\nxt_umbral_D0' using process `\fsmControl.$proc$fsm_Control.v:43$1'.
  created $dff cell `$procdff$397' with positive edge clock.
Creating register for signal `\fsmControl.\nxt_umbral_D1' using process `\fsmControl.$proc$fsm_Control.v:43$1'.
  created $dff cell `$procdff$398' with positive edge clock.
Creating register for signal `\fsmControl.\nxt_umbral_VC0' using process `\fsmControl.$proc$fsm_Control.v:43$1'.
  created $dff cell `$procdff$399' with positive edge clock.
Creating register for signal `\fsmControl.\nxt_umbral_VC1' using process `\fsmControl.$proc$fsm_Control.v:43$1'.
  created $dff cell `$procdff$400' with positive edge clock.
Creating register for signal `\fsmControl.\state' using process `\fsmControl.$proc$fsm_Control.v:43$1'.
  created $dff cell `$procdff$401' with positive edge clock.
Creating register for signal `\fsmControl.\nxt_state' using process `\fsmControl.$proc$fsm_Control.v:43$1'.
  created $dff cell `$procdff$402' with positive edge clock.
Creating register for signal `\fsmControl.\nxt_umbrales' using process `\fsmControl.$proc$fsm_Control.v:43$1'.
  created $dff cell `$procdff$403' with positive edge clock.
Creating register for signal `\fsmControl.\error_out_0' using process `\fsmControl.$proc$fsm_Control.v:43$1'.
  created $dff cell `$procdff$404' with positive edge clock.
Creating register for signal `\fsmControl.\error_out_1' using process `\fsmControl.$proc$fsm_Control.v:43$1'.
  created $dff cell `$procdff$405' with positive edge clock.
Creating register for signal `\fsmControl.\error_out_2' using process `\fsmControl.$proc$fsm_Control.v:43$1'.
  created $dff cell `$procdff$406' with positive edge clock.
Creating register for signal `\fsmControl.\error_out_3' using process `\fsmControl.$proc$fsm_Control.v:43$1'.
  created $dff cell `$procdff$407' with positive edge clock.
Creating register for signal `\fsmControl.\error_out_4' using process `\fsmControl.$proc$fsm_Control.v:43$1'.
  created $dff cell `$procdff$408' with positive edge clock.
Creating register for signal `\fsmControl.\error_out_w' using process `\fsmControl.$proc$fsm_Control.v:43$1'.
  created $dff cell `$procdff$409' with positive edge clock.

3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 22 empty switches in `\fsmControl.$proc$fsm_Control.v:43$1'.
Removing empty process `fsmControl.$proc$fsm_Control.v:43$1'.
Cleaned up 22 empty switches.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Replacing $ne cell `$ne$fsm_Control.v:80$3' in module `fsmControl' with $logic_not.
Replacing $ne cell `$ne$fsm_Control.v:89$4' in module `fsmControl' with $logic_not.
Replacing $eq cell `$eq$fsm_Control.v:92$5' in module `fsmControl' with $logic_not.
Replacing $ne cell `$ne$fsm_Control.v:96$6' in module `fsmControl' with $logic_not.
Replacing $ne cell `$ne$fsm_Control.v:105$7' in module `fsmControl' with $logic_not.
Replacing $eq cell `$eq$fsm_Control.v:109$8' in module `fsmControl' with $logic_not.
Replacing $eq cell `$eq$fsm_Control.v:116$9' (1) in module `\fsmControl' with constant driver `$eq$fsm_Control.v:116$9_Y = \FIFO_error [4]'.
Replacing $eq cell `$eq$fsm_Control.v:122$10' (1) in module `\fsmControl' with constant driver `$eq$fsm_Control.v:122$10_Y = \FIFO_error [3]'.
Replacing $eq cell `$eq$fsm_Control.v:125$11' (1) in module `\fsmControl' with constant driver `$eq$fsm_Control.v:125$11_Y = \FIFO_error [2]'.
Replacing $eq cell `$eq$fsm_Control.v:128$12' (1) in module `\fsmControl' with constant driver `$eq$fsm_Control.v:128$12_Y = \FIFO_error [1]'.
Replacing $eq cell `$eq$fsm_Control.v:131$13' (1) in module `\fsmControl' with constant driver `$eq$fsm_Control.v:131$13_Y = \FIFO_error [1]'.
Replacing $eq cell `$eq$fsm_Control.v:134$14' (1) in module `\fsmControl' with constant driver `$eq$fsm_Control.v:134$14_Y = \FIFO_error [0]'.
Replacing $eq cell `$eq$fsm_Control.v:138$15' (1) in module `\fsmControl' with constant driver `$eq$fsm_Control.v:138$15_Y = \FIFO_error [4]'.
Replacing $eq cell `$eq$fsm_Control.v:143$16' (1) in module `\fsmControl' with constant driver `$eq$fsm_Control.v:143$16_Y = \FIFO_error [4]'.
Replacing $eq cell `$eq$fsm_Control.v:148$17' (1) in module `\fsmControl' with constant driver `$eq$fsm_Control.v:148$17_Y = \FIFO_error [3]'.
Replacing $eq cell `$eq$fsm_Control.v:153$18' (1) in module `\fsmControl' with constant driver `$eq$fsm_Control.v:153$18_Y = \FIFO_error [2]'.
Replacing $eq cell `$eq$fsm_Control.v:158$19' (1) in module `\fsmControl' with constant driver `$eq$fsm_Control.v:158$19_Y = \FIFO_error [1]'.
Replacing $eq cell `$eq$fsm_Control.v:163$20' (1) in module `\fsmControl' with constant driver `$eq$fsm_Control.v:163$20_Y = \FIFO_error [0]'.
Optimizing away select inverter for $mux cell `$procmux$280' in module `fsmControl'.
Optimizing away select inverter for $mux cell `$procmux$310' in module `fsmControl'.
Optimizing away select inverter for $mux cell `$procmux$383' in module `fsmControl'.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsmControl'.
  Cell `$procmux$378_CMP0' is identical to cell `$procmux$391_CMP0'.
    Redirecting output \Y: $procmux$378_CMP = $procmux$391_CMP
    Removing $eq cell `$procmux$378_CMP0' from module `\fsmControl'.
  Cell `$procmux$367_CMP0' is identical to cell `$procmux$391_CMP0'.
    Redirecting output \Y: $procmux$367_CMP = $procmux$391_CMP
    Removing $eq cell `$procmux$367_CMP0' from module `\fsmControl'.
  Cell `$procmux$356_CMP0' is identical to cell `$procmux$377_CMP0'.
    Redirecting output \Y: $procmux$356_CMP = $procmux$377_CMP
    Removing $eq cell `$procmux$356_CMP0' from module `\fsmControl'.
  Cell `$procmux$346_CMP0' is identical to cell `$procmux$391_CMP0'.
    Redirecting output \Y: $procmux$346_CMP = $procmux$391_CMP
    Removing $eq cell `$procmux$346_CMP0' from module `\fsmControl'.
  Cell `$procmux$339_CMP0' is identical to cell `$procmux$391_CMP0'.
    Redirecting output \Y: $procmux$339_CMP = $procmux$391_CMP
    Removing $eq cell `$procmux$339_CMP0' from module `\fsmControl'.
  Cell `$procmux$332_CMP0' is identical to cell `$procmux$391_CMP0'.
    Redirecting output \Y: $procmux$332_CMP = $procmux$391_CMP
    Removing $eq cell `$procmux$332_CMP0' from module `\fsmControl'.
  Cell `$procmux$325_CMP0' is identical to cell `$procmux$391_CMP0'.
    Redirecting output \Y: $procmux$325_CMP = $procmux$391_CMP
    Removing $eq cell `$procmux$325_CMP0' from module `\fsmControl'.
  Cell `$procmux$318_CMP0' is identical to cell `$procmux$391_CMP0'.
    Redirecting output \Y: $procmux$318_CMP = $procmux$391_CMP
    Removing $eq cell `$procmux$318_CMP0' from module `\fsmControl'.
  Cell `$procmux$305_CMP0' is identical to cell `$procmux$391_CMP0'.
    Redirecting output \Y: $procmux$305_CMP = $procmux$391_CMP
    Removing $eq cell `$procmux$305_CMP0' from module `\fsmControl'.
  Cell `$procmux$304_CMP0' is identical to cell `$procmux$390_CMP0'.
    Redirecting output \Y: $procmux$304_CMP = $procmux$390_CMP
    Removing $eq cell `$procmux$304_CMP0' from module `\fsmControl'.
  Cell `$procmux$300_CMP0' is identical to cell `$procmux$366_CMP0'.
    Redirecting output \Y: $procmux$300_CMP = $procmux$366_CMP
    Removing $eq cell `$procmux$300_CMP0' from module `\fsmControl'.
  Cell `$procmux$290_CMP0' is identical to cell `$procmux$377_CMP0'.
    Redirecting output \Y: $procmux$290_CMP = $procmux$377_CMP
    Removing $eq cell `$procmux$290_CMP0' from module `\fsmControl'.
  Cell `$procmux$283_CMP0' is identical to cell `$procmux$352_CMP0'.
    Redirecting output \Y: $procmux$283_CMP = $procmux$352_CMP
    Removing $eq cell `$procmux$283_CMP0' from module `\fsmControl'.
  Cell `$procmux$256_CMP0' is identical to cell `$procmux$390_CMP0'.
    Redirecting output \Y: $procmux$256_CMP = $procmux$390_CMP
    Removing $eq cell `$procmux$256_CMP0' from module `\fsmControl'.
  Cell `$procmux$250_CMP0' is identical to cell `$procmux$391_CMP0'.
    Redirecting output \Y: $procmux$250_CMP = $procmux$391_CMP
    Removing $eq cell `$procmux$250_CMP0' from module `\fsmControl'.
  Cell `$procmux$249_CMP0' is identical to cell `$procmux$352_CMP0'.
    Redirecting output \Y: $procmux$249_CMP = $procmux$352_CMP
    Removing $eq cell `$procmux$249_CMP0' from module `\fsmControl'.
  Cell `$procmux$231_CMP0' is identical to cell `$procmux$391_CMP0'.
    Redirecting output \Y: $procmux$231_CMP = $procmux$391_CMP
    Removing $eq cell `$procmux$231_CMP0' from module `\fsmControl'.
  Cell `$procmux$230_CMP0' is identical to cell `$procmux$352_CMP0'.
    Redirecting output \Y: $procmux$230_CMP = $procmux$352_CMP
    Removing $eq cell `$procmux$230_CMP0' from module `\fsmControl'.
  Cell `$procmux$215_CMP0' is identical to cell `$procmux$391_CMP0'.
    Redirecting output \Y: $procmux$215_CMP = $procmux$391_CMP
    Removing $eq cell `$procmux$215_CMP0' from module `\fsmControl'.
  Cell `$procmux$214_CMP0' is identical to cell `$procmux$352_CMP0'.
    Redirecting output \Y: $procmux$214_CMP = $procmux$352_CMP
    Removing $eq cell `$procmux$214_CMP0' from module `\fsmControl'.
  Cell `$procmux$202_CMP0' is identical to cell `$procmux$391_CMP0'.
    Redirecting output \Y: $procmux$202_CMP = $procmux$391_CMP
    Removing $eq cell `$procmux$202_CMP0' from module `\fsmControl'.
  Cell `$procmux$201_CMP0' is identical to cell `$procmux$352_CMP0'.
    Redirecting output \Y: $procmux$201_CMP = $procmux$352_CMP
    Removing $eq cell `$procmux$201_CMP0' from module `\fsmControl'.
  Cell `$procmux$192_CMP0' is identical to cell `$procmux$391_CMP0'.
    Redirecting output \Y: $procmux$192_CMP = $procmux$391_CMP
    Removing $eq cell `$procmux$192_CMP0' from module `\fsmControl'.
  Cell `$procmux$191_CMP0' is identical to cell `$procmux$352_CMP0'.
    Redirecting output \Y: $procmux$191_CMP = $procmux$352_CMP
    Removing $eq cell `$procmux$191_CMP0' from module `\fsmControl'.
  Cell `$procmux$182_CMP0' is identical to cell `$procmux$391_CMP0'.
    Redirecting output \Y: $procmux$182_CMP = $procmux$391_CMP
    Removing $eq cell `$procmux$182_CMP0' from module `\fsmControl'.
  Cell `$procmux$181_CMP0' is identical to cell `$procmux$352_CMP0'.
    Redirecting output \Y: $procmux$181_CMP = $procmux$352_CMP
    Removing $eq cell `$procmux$181_CMP0' from module `\fsmControl'.
  Cell `$procmux$151_CMP0' is identical to cell `$procmux$391_CMP0'.
    Redirecting output \Y: $procmux$151_CMP = $procmux$391_CMP
    Removing $eq cell `$procmux$151_CMP0' from module `\fsmControl'.
  Cell `$procmux$150_CMP0' is identical to cell `$procmux$352_CMP0'.
    Redirecting output \Y: $procmux$150_CMP = $procmux$352_CMP
    Removing $eq cell `$procmux$150_CMP0' from module `\fsmControl'.
  Cell `$procmux$114_CMP0' is identical to cell `$procmux$391_CMP0'.
    Redirecting output \Y: $procmux$114_CMP = $procmux$391_CMP
    Removing $eq cell `$procmux$114_CMP0' from module `\fsmControl'.
  Cell `$procmux$113_CMP0' is identical to cell `$procmux$352_CMP0'.
    Redirecting output \Y: $procmux$113_CMP = $procmux$352_CMP
    Removing $eq cell `$procmux$113_CMP0' from module `\fsmControl'.
  Cell `$procmux$74_CMP0' is identical to cell `$procmux$391_CMP0'.
    Redirecting output \Y: $procmux$74_CMP = $procmux$391_CMP
    Removing $eq cell `$procmux$74_CMP0' from module `\fsmControl'.
  Cell `$procmux$73_CMP0' is identical to cell `$procmux$352_CMP0'.
    Redirecting output \Y: $procmux$73_CMP = $procmux$352_CMP
    Removing $eq cell `$procmux$73_CMP0' from module `\fsmControl'.
  Cell `$procmux$46_CMP0' is identical to cell `$procmux$391_CMP0'.
    Redirecting output \Y: $procmux$46_CMP = $procmux$391_CMP
    Removing $eq cell `$procmux$46_CMP0' from module `\fsmControl'.
  Cell `$procmux$45_CMP0' is identical to cell `$procmux$352_CMP0'.
    Redirecting output \Y: $procmux$45_CMP = $procmux$352_CMP
    Removing $eq cell `$procmux$45_CMP0' from module `\fsmControl'.
  Cell `$eq$fsm_Control.v:92$5' is identical to cell `$eq$fsm_Control.v:109$8'.
    Redirecting output \Y: $eq$fsm_Control.v:92$5_Y = $eq$fsm_Control.v:109$8_Y
    Removing $logic_not cell `$eq$fsm_Control.v:92$5' from module `\fsmControl'.
  Cell `$ne$fsm_Control.v:89$4' is identical to cell `$ne$fsm_Control.v:105$7'.
    Redirecting output \Y: $ne$fsm_Control.v:89$4_Y = $ne$fsm_Control.v:105$7_Y
    Removing $reduce_bool cell `$ne$fsm_Control.v:89$4' from module `\fsmControl'.
  Cell `$ne$fsm_Control.v:80$3' is identical to cell `$ne$fsm_Control.v:105$7'.
    Redirecting output \Y: $ne$fsm_Control.v:80$3_Y = $ne$fsm_Control.v:105$7_Y
    Removing $reduce_bool cell `$ne$fsm_Control.v:80$3' from module `\fsmControl'.
  Cell `$not$fsm_Control.v:44$2' is identical to cell `$not$fsm_Control.v:168$21'.
    Redirecting output \Y: $not$fsm_Control.v:44$2_Y = $not$fsm_Control.v:168$21_Y
    Removing $not cell `$not$fsm_Control.v:44$2' from module `\fsmControl'.
Removed a total of 38 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fsmControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$282 (pure)
    Root of a mux tree: $procmux$376 (pure)
    Root of a mux tree: $procmux$255 (pure)
    Root of a mux tree: $procmux$248 (pure)
    Root of a mux tree: $procmux$229 (pure)
    Root of a mux tree: $procmux$213 (pure)
    Root of a mux tree: $procmux$200 (pure)
    Root of a mux tree: $procmux$355 (pure)
    Root of a mux tree: $procmux$190 (pure)
    Root of a mux tree: $procmux$351 (pure)
    Root of a mux tree: $procmux$180 (pure)
    Root of a mux tree: $procmux$345 (pure)
    Root of a mux tree: $procmux$149 (pure)
    Root of a mux tree: $procmux$338 (pure)
    Root of a mux tree: $procmux$112 (pure)
    Root of a mux tree: $procmux$331 (pure)
    Root of a mux tree: $procmux$72 (pure)
    Root of a mux tree: $procmux$324 (pure)
    Root of a mux tree: $procmux$44 (pure)
    Root of a mux tree: $procmux$317 (pure)
    Root of a mux tree: $procmux$389 (pure)
    Root of a mux tree: $procmux$310 (pure)
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$262.
    dead port 1/2 on $mux $procmux$259.
    dead port 1/2 on $mux $procmux$185.
    dead port 1/2 on $mux $procmux$163.
    dead port 1/2 on $mux $procmux$160.
    dead port 1/2 on $mux $procmux$157.
    dead port 1/2 on $mux $procmux$154.
    dead port 1/2 on $mux $procmux$132.
    dead port 1/2 on $mux $procmux$129.
    dead port 1/2 on $mux $procmux$126.
    dead port 1/2 on $mux $procmux$123.
    dead port 1/2 on $mux $procmux$120.
    dead port 1/2 on $mux $procmux$117.
    dead port 1/2 on $mux $procmux$95.
    dead port 1/2 on $mux $procmux$92.
    dead port 1/2 on $mux $procmux$89.
    dead port 1/2 on $mux $procmux$86.
    dead port 1/2 on $mux $procmux$83.
    dead port 1/2 on $mux $procmux$80.
    dead port 1/2 on $mux $procmux$77.
    dead port 1/2 on $mux $procmux$55.
    dead port 1/2 on $mux $procmux$52.
    dead port 1/2 on $mux $procmux$49.
    dead port 1/2 on $mux $procmux$27.
    dead port 1/2 on $mux $procmux$24.
Removed 25 multiplexer ports.

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fsmControl.
    New ctrl vector for $pmux cell $procmux$355: { $procmux$366_CMP $auto$opt_reduce.cc:132:opt_mux$411 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$410: { $procmux$377_CMP $procmux$391_CMP }
  Optimizing cells in module \fsmControl.
Performed a total of 2 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsmControl'.
Removed a total of 0 cells.

4.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$396 ($dff) from module fsmControl.
Removing $procdff$397 ($dff) from module fsmControl.
Removing $procdff$398 ($dff) from module fsmControl.
Removing $procdff$399 ($dff) from module fsmControl.
Removing $procdff$400 ($dff) from module fsmControl.
Replaced 5 DFF cells.

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsmControl..
  removing unused `$not' cell `$not$fsm_Control.v:168$21'.
  removing unused `$mux' cell `$procmux$317'.
  removing unused `$mux' cell `$procmux$324'.
  removing unused `$mux' cell `$procmux$331'.
  removing unused `$mux' cell `$procmux$338'.
  removing unused `$mux' cell `$procmux$345'.
  removing unused `$mux' cell `$procmux$349'.
  removing unused `$mux' cell `$procmux$351'.
  removing unused `$dff' cell `$procdff$409'.
  removing unused non-port wire \error_out_w.
  removing unused non-port wire \nxt_umbral_VC1.
  removing unused non-port wire \nxt_umbral_VC0.
  removing unused non-port wire \nxt_umbral_D1.
  removing unused non-port wire \nxt_umbral_D0.
  removing unused non-port wire \nxt_umbral_MF.
  removed 6 unused temporary wires.

4.8. Executing OPT_EXPR pass (perform const folding).

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fsmControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$112 (pure)
    Root of a mux tree: $procmux$149 (pure)
    Root of a mux tree: $procmux$180 (pure)
    Root of a mux tree: $procmux$190 (pure)
    Root of a mux tree: $procmux$200 (pure)
    Root of a mux tree: $procmux$213 (pure)
    Root of a mux tree: $procmux$229 (pure)
    Root of a mux tree: $procmux$248 (pure)
    Root of a mux tree: $procmux$255 (pure)
    Root of a mux tree: $procmux$282 (pure)
    Root of a mux tree: $procmux$310 (pure)
    Root of a mux tree: $procmux$355 (pure)
    Root of a mux tree: $procmux$376 (pure)
    Root of a mux tree: $procmux$389 (pure)
    Root of a mux tree: $procmux$44 (pure)
    Root of a mux tree: $procmux$72 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fsmControl.
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$410: { $procmux$114_CMP $procmux$290_CMP }
  Optimizing cells in module \fsmControl.
Performed a total of 1 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsmControl'.
Removed a total of 0 cells.

4.13. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$403 ($dff) from module fsmControl.
Replaced 1 DFF cells.

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsmControl..
  removing unused `$mux' cell `$procmux$255'.
  removing unused non-port wire \nxt_umbrales.
  removed 1 unused temporary wires.

4.15. Executing OPT_EXPR pass (perform const folding).

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fsmControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$112 (pure)
    Root of a mux tree: $procmux$149 (pure)
    Root of a mux tree: $procmux$180 (pure)
    Root of a mux tree: $procmux$190 (pure)
    Root of a mux tree: $procmux$200 (pure)
    Root of a mux tree: $procmux$213 (pure)
    Root of a mux tree: $procmux$229 (pure)
    Root of a mux tree: $procmux$248 (pure)
    Root of a mux tree: $procmux$282 (pure)
    Root of a mux tree: $procmux$310 (pure)
    Root of a mux tree: $procmux$355 (pure)
    Root of a mux tree: $procmux$376 (pure)
    Root of a mux tree: $procmux$389 (pure)
    Root of a mux tree: $procmux$44 (pure)
    Root of a mux tree: $procmux$72 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fsmControl.
    New ctrl vector for $pmux cell $procmux$389: $auto$opt_reduce.cc:132:opt_mux$413
  Optimizing cells in module \fsmControl.
Performed a total of 1 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsmControl'.
Removed a total of 0 cells.

4.20. Executing OPT_RMDFF pass (remove dff with constant values).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsmControl..

4.22. Executing OPT_EXPR pass (perform const folding).

4.23. Rerunning OPT passes. (Maybe there is more to do..)

4.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fsmControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$112 (pure)
    Root of a mux tree: $procmux$149 (pure)
    Root of a mux tree: $procmux$180 (pure)
    Root of a mux tree: $procmux$190 (pure)
    Root of a mux tree: $procmux$200 (pure)
    Root of a mux tree: $procmux$213 (pure)
    Root of a mux tree: $procmux$229 (pure)
    Root of a mux tree: $procmux$248 (pure)
    Root of a mux tree: $procmux$282 (pure)
    Root of a mux tree: $procmux$310 (pure)
    Root of a mux tree: $procmux$355 (pure)
    Root of a mux tree: $procmux$376 (pure)
    Root of a mux tree: $procmux$389 (pure)
    Root of a mux tree: $procmux$44 (pure)
    Root of a mux tree: $procmux$72 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

4.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fsmControl.
Performed a total of 0 changes.

4.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsmControl'.
Removed a total of 0 cells.

4.27. Executing OPT_RMDFF pass (remove dff with constant values).

4.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsmControl..

4.29. Executing OPT_EXPR pass (perform const folding).

4.30. Finished OPT passes. (There is nothing left to do.)

5. Executing FSM pass (extract and optimize FSM).

5.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking fsmControl.nxt_state as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking fsmControl.umbrales_I as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.

5.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsmControl..

5.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsmControl'.
Removed a total of 0 cells.

6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fsmControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$112 (pure)
    Root of a mux tree: $procmux$149 (pure)
    Root of a mux tree: $procmux$180 (pure)
    Root of a mux tree: $procmux$190 (pure)
    Root of a mux tree: $procmux$200 (pure)
    Root of a mux tree: $procmux$213 (pure)
    Root of a mux tree: $procmux$229 (pure)
    Root of a mux tree: $procmux$248 (pure)
    Root of a mux tree: $procmux$282 (pure)
    Root of a mux tree: $procmux$310 (pure)
    Root of a mux tree: $procmux$355 (pure)
    Root of a mux tree: $procmux$376 (pure)
    Root of a mux tree: $procmux$389 (pure)
    Root of a mux tree: $procmux$44 (pure)
    Root of a mux tree: $procmux$72 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fsmControl.
Performed a total of 0 changes.

6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsmControl'.
Removed a total of 0 cells.

6.6. Executing OPT_RMDFF pass (remove dff with constant values).

6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsmControl..

6.8. Executing OPT_EXPR pass (perform const folding).

6.9. Finished OPT passes. (There is nothing left to do.)

7. Executing MEMORY pass.

7.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

7.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsmControl..

7.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsmControl..

7.5. Executing MEMORY_COLLECT pass (generating $mem cells).

7.6. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsmControl'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fsmControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$112 (pure)
    Root of a mux tree: $procmux$149 (pure)
    Root of a mux tree: $procmux$180 (pure)
    Root of a mux tree: $procmux$190 (pure)
    Root of a mux tree: $procmux$200 (pure)
    Root of a mux tree: $procmux$213 (pure)
    Root of a mux tree: $procmux$229 (pure)
    Root of a mux tree: $procmux$248 (pure)
    Root of a mux tree: $procmux$282 (pure)
    Root of a mux tree: $procmux$310 (pure)
    Root of a mux tree: $procmux$355 (pure)
    Root of a mux tree: $procmux$376 (pure)
    Root of a mux tree: $procmux$389 (pure)
    Root of a mux tree: $procmux$44 (pure)
    Root of a mux tree: $procmux$72 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fsmControl.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsmControl'.
Removed a total of 0 cells.

8.6. Executing OPT_RMDFF pass (remove dff with constant values).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsmControl..

8.8. Executing OPT_EXPR pass (perform const folding).

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing TECHMAP pass (map to technology primitives).

9.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping fsmControl.$ne$fsm_Control.v:96$6 ($reduce_bool) with simplemap.
Mapping fsmControl.$ne$fsm_Control.v:105$7 ($reduce_bool) with simplemap.
Mapping fsmControl.$eq$fsm_Control.v:109$8 ($logic_not) with simplemap.
Mapping fsmControl.$auto$opt_reduce.cc:126:opt_mux$410 ($reduce_or) with simplemap.
Mapping fsmControl.$procmux$30 ($mux) with simplemap.
Mapping fsmControl.$procmux$33 ($mux) with simplemap.
Mapping fsmControl.$procmux$36 ($mux) with simplemap.
Mapping fsmControl.$procmux$39 ($mux) with simplemap.
Mapping fsmControl.$procmux$42 ($mux) with simplemap.

9.2. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 1
Parameter \S_WIDTH = 2
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=1\S_WIDTH=2'.

9.3. Continuing TECHMAP pass.
Mapping fsmControl.$procmux$44 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.
Mapping fsmControl.$auto$opt_reduce.cc:126:opt_mux$412 ($reduce_or) with simplemap.
Mapping fsmControl.$procmux$58 ($mux) with simplemap.
Mapping fsmControl.$procmux$61 ($mux) with simplemap.
Mapping fsmControl.$procmux$64 ($mux) with simplemap.
Mapping fsmControl.$procmux$67 ($mux) with simplemap.
Mapping fsmControl.$procmux$70 ($mux) with simplemap.
Mapping fsmControl.$procmux$72 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.
Mapping fsmControl.$procmux$98 ($mux) with simplemap.
Mapping fsmControl.$procmux$101 ($mux) with simplemap.
Mapping fsmControl.$procmux$104 ($mux) with simplemap.
Mapping fsmControl.$procmux$107 ($mux) with simplemap.
Mapping fsmControl.$procmux$110 ($mux) with simplemap.
Mapping fsmControl.$procmux$112 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.
Mapping fsmControl.$procmux$135 ($mux) with simplemap.
Mapping fsmControl.$procmux$138 ($mux) with simplemap.
Mapping fsmControl.$procmux$141 ($mux) with simplemap.
Mapping fsmControl.$procmux$144 ($mux) with simplemap.
Mapping fsmControl.$procmux$147 ($mux) with simplemap.
Mapping fsmControl.$procmux$149 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.
Mapping fsmControl.$procmux$166 ($mux) with simplemap.
Mapping fsmControl.$procmux$169 ($mux) with simplemap.
Mapping fsmControl.$procmux$172 ($mux) with simplemap.
Mapping fsmControl.$procmux$175 ($mux) with simplemap.
Mapping fsmControl.$procmux$178 ($mux) with simplemap.
Mapping fsmControl.$procmux$180 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.
Mapping fsmControl.$procmux$188 ($mux) with simplemap.
Mapping fsmControl.$procmux$190 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.
Mapping fsmControl.$procmux$195 ($mux) with simplemap.
Mapping fsmControl.$procmux$198 ($mux) with simplemap.
Mapping fsmControl.$procmux$200 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.
Mapping fsmControl.$procmux$205 ($mux) with simplemap.
Mapping fsmControl.$procmux$208 ($mux) with simplemap.
Mapping fsmControl.$procmux$211 ($mux) with simplemap.
Mapping fsmControl.$procmux$213 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.
Mapping fsmControl.$procmux$218 ($mux) with simplemap.
Mapping fsmControl.$procmux$221 ($mux) with simplemap.
Mapping fsmControl.$procmux$224 ($mux) with simplemap.
Mapping fsmControl.$procmux$227 ($mux) with simplemap.
Mapping fsmControl.$procmux$229 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.
Mapping fsmControl.$procmux$234 ($mux) with simplemap.
Mapping fsmControl.$procmux$237 ($mux) with simplemap.
Mapping fsmControl.$procmux$240 ($mux) with simplemap.
Mapping fsmControl.$procmux$243 ($mux) with simplemap.
Mapping fsmControl.$procmux$246 ($mux) with simplemap.
Mapping fsmControl.$procmux$248 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.
Mapping fsmControl.$procmux$265 ($mux) with simplemap.
Mapping fsmControl.$procmux$268 ($mux) with simplemap.
Mapping fsmControl.$procmux$271 ($mux) with simplemap.
Mapping fsmControl.$procmux$274 ($mux) with simplemap.
Mapping fsmControl.$procmux$277 ($mux) with simplemap.
Mapping fsmControl.$procmux$280 ($mux) with simplemap.

9.4. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 5
Parameter \S_WIDTH = 5
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=5\S_WIDTH=5'.

9.5. Continuing TECHMAP pass.
Mapping fsmControl.$procmux$282 using $paramod\_90_pmux\WIDTH=5\S_WIDTH=5.
Mapping fsmControl.$procmux$285 ($mux) with simplemap.
Mapping fsmControl.$procmux$288 ($mux) with simplemap.
Mapping fsmControl.$procmux$292 ($mux) with simplemap.
Mapping fsmControl.$procmux$295 ($mux) with simplemap.
Mapping fsmControl.$procmux$298 ($mux) with simplemap.
Mapping fsmControl.$procmux$302 ($mux) with simplemap.
Mapping fsmControl.$procmux$307 ($mux) with simplemap.
Mapping fsmControl.$procmux$310 ($mux) with simplemap.
Mapping fsmControl.$procmux$352_CMP0 ($eq) with simplemap.
Mapping fsmControl.$procmux$355 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.
Mapping fsmControl.$procmux$358 ($mux) with simplemap.
Mapping fsmControl.$procmux$361 ($mux) with simplemap.
Mapping fsmControl.$procmux$364 ($mux) with simplemap.
Mapping fsmControl.$procmux$366_CMP0 ($eq) with simplemap.
Mapping fsmControl.$procmux$371 ($mux) with simplemap.
Mapping fsmControl.$procmux$374 ($mux) with simplemap.
Mapping fsmControl.$procmux$377_CMP0 ($eq) with simplemap.
Mapping fsmControl.$procmux$376 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.
Mapping fsmControl.$procmux$380 ($mux) with simplemap.
Mapping fsmControl.$procmux$383 ($mux) with simplemap.
Mapping fsmControl.$procmux$390_CMP0 ($eq) with simplemap.
Mapping fsmControl.$procmux$389 ($mux) with simplemap.
Mapping fsmControl.$procmux$391_CMP0 ($eq) with simplemap.
Mapping fsmControl.$procdff$392 ($dff) with simplemap.
Mapping fsmControl.$procdff$393 ($dff) with simplemap.
Mapping fsmControl.$procdff$394 ($dff) with simplemap.
Mapping fsmControl.$procdff$395 ($dff) with simplemap.
Mapping fsmControl.$procdff$401 ($dff) with simplemap.
Mapping fsmControl.$procdff$402 ($dff) with simplemap.
Mapping fsmControl.$procdff$404 ($dff) with simplemap.
Mapping fsmControl.$procdff$405 ($dff) with simplemap.
Mapping fsmControl.$procdff$406 ($dff) with simplemap.
Mapping fsmControl.$procdff$407 ($dff) with simplemap.
Mapping fsmControl.$procdff$408 ($dff) with simplemap.
Mapping fsmControl.$techmap$procmux$44.$reduce_or$<techmap.v>:445$487 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$44.$ternary$<techmap.v>:445$488 ($mux) with simplemap.
Mapping fsmControl.$techmap$procmux$44.$and$<techmap.v>:434$489 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$44.$reduce_or$<techmap.v>:441$491 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$44.$and$<techmap.v>:434$490 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$112.$and$<techmap.v>:434$490 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$112.$reduce_or$<techmap.v>:441$491 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$72.$and$<techmap.v>:434$490 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$72.$reduce_or$<techmap.v>:441$491 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$72.$and$<techmap.v>:434$489 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$112.$and$<techmap.v>:434$489 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$112.$ternary$<techmap.v>:445$488 ($mux) with simplemap.
Mapping fsmControl.$techmap$procmux$72.$ternary$<techmap.v>:445$488 ($mux) with simplemap.
Mapping fsmControl.$techmap$procmux$72.$reduce_or$<techmap.v>:445$487 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$112.$reduce_or$<techmap.v>:445$487 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$149.$and$<techmap.v>:434$490 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$149.$reduce_or$<techmap.v>:441$491 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$149.$and$<techmap.v>:434$489 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$149.$ternary$<techmap.v>:445$488 ($mux) with simplemap.
Mapping fsmControl.$techmap$procmux$149.$reduce_or$<techmap.v>:445$487 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$180.$and$<techmap.v>:434$490 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$180.$reduce_or$<techmap.v>:441$491 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$180.$and$<techmap.v>:434$489 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$180.$ternary$<techmap.v>:445$488 ($mux) with simplemap.
Mapping fsmControl.$techmap$procmux$180.$reduce_or$<techmap.v>:445$487 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$190.$and$<techmap.v>:434$490 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$190.$reduce_or$<techmap.v>:441$491 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$190.$and$<techmap.v>:434$489 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$190.$ternary$<techmap.v>:445$488 ($mux) with simplemap.
Mapping fsmControl.$techmap$procmux$190.$reduce_or$<techmap.v>:445$487 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$200.$and$<techmap.v>:434$490 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$200.$reduce_or$<techmap.v>:441$491 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$200.$and$<techmap.v>:434$489 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$200.$ternary$<techmap.v>:445$488 ($mux) with simplemap.
Mapping fsmControl.$techmap$procmux$200.$reduce_or$<techmap.v>:445$487 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$213.$and$<techmap.v>:434$490 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$213.$reduce_or$<techmap.v>:441$491 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$213.$and$<techmap.v>:434$489 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$213.$ternary$<techmap.v>:445$488 ($mux) with simplemap.
Mapping fsmControl.$techmap$procmux$213.$reduce_or$<techmap.v>:445$487 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$229.$and$<techmap.v>:434$490 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$229.$reduce_or$<techmap.v>:441$491 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$229.$and$<techmap.v>:434$489 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$229.$ternary$<techmap.v>:445$488 ($mux) with simplemap.
Mapping fsmControl.$techmap$procmux$229.$reduce_or$<techmap.v>:445$487 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$248.$and$<techmap.v>:434$490 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$248.$reduce_or$<techmap.v>:441$491 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$248.$and$<techmap.v>:434$489 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$248.$ternary$<techmap.v>:445$488 ($mux) with simplemap.
Mapping fsmControl.$techmap$procmux$248.$reduce_or$<techmap.v>:445$487 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$282.$reduce_or$<techmap.v>:441$569 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$282.$reduce_or$<techmap.v>:441$570 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$282.$reduce_or$<techmap.v>:441$568 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$282.$reduce_or$<techmap.v>:441$567 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$282.$reduce_or$<techmap.v>:441$566 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$282.$and$<techmap.v>:434$565 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$282.$and$<techmap.v>:434$564 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$282.$and$<techmap.v>:434$563 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$282.$and$<techmap.v>:434$562 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$282.$and$<techmap.v>:434$561 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$282.$ternary$<techmap.v>:445$560 ($mux) with simplemap.
Mapping fsmControl.$techmap$procmux$282.$reduce_or$<techmap.v>:445$559 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$355.$and$<techmap.v>:434$490 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$355.$reduce_or$<techmap.v>:441$491 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$355.$and$<techmap.v>:434$489 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$355.$ternary$<techmap.v>:445$488 ($mux) with simplemap.
Mapping fsmControl.$techmap$procmux$355.$reduce_or$<techmap.v>:445$487 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$376.$and$<techmap.v>:434$490 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$376.$reduce_or$<techmap.v>:441$491 ($reduce_or) with simplemap.
Mapping fsmControl.$techmap$procmux$376.$and$<techmap.v>:434$489 ($and) with simplemap.
Mapping fsmControl.$techmap$procmux$376.$ternary$<techmap.v>:445$488 ($mux) with simplemap.
Mapping fsmControl.$techmap$procmux$376.$reduce_or$<techmap.v>:445$487 ($reduce_or) with simplemap.
No more expansions possible.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$704' (?0) in module `\fsmControl' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$698 [4] = \state [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$700' (?0) in module `\fsmControl' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$698 [0] = \state [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$702' (?0) in module `\fsmControl' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$698 [2] = \state [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$703' (?0) in module `\fsmControl' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$698 [3] = \state [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$736' (?0) in module `\fsmControl' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$730 [4] = \state [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$733' (?0) in module `\fsmControl' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$730 [1] = \state [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$734' (?0) in module `\fsmControl' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$730 [2] = \state [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$735' (?0) in module `\fsmControl' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$730 [3] = \state [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$658' (?0) in module `\fsmControl' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$652 [4] = \state [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$654' (?0) in module `\fsmControl' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$652 [0] = \state [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$655' (?0) in module `\fsmControl' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$652 [1] = \state [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$656' (?0) in module `\fsmControl' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$652 [2] = \state [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$613' (?0) in module `\fsmControl' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$611 [0] = \state [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$614' (?0) in module `\fsmControl' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$611 [1] = \state [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$615' (?0) in module `\fsmControl' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$611 [2] = \state [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$616' (?0) in module `\fsmControl' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$611 [3] = \state [3]'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$572' in module `fsmControl'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$571' in module `fsmControl'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$573' in module `fsmControl'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$574' in module `fsmControl'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$575' in module `fsmControl'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$587' in module `fsmControl'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$586' in module `fsmControl'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$588' in module `fsmControl'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$589' in module `fsmControl'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$590' in module `fsmControl'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$597' (00?) in module `\fsmControl' with constant driver `$procmux$302_Y [1] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$596' (00?) in module `\fsmControl' with constant driver `$procmux$302_Y [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$599' (00?) in module `\fsmControl' with constant driver `$procmux$302_Y [3] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$600' (01?) in module `\fsmControl' with constant driver `$procmux$302_Y [4] = $ne$fsm_Control.v:105$7_Y'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$630' in module `fsmControl'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$634' (?0) in module `\fsmControl' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$632 [0] = \state [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$635' (?0) in module `\fsmControl' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$632 [1] = \state [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$637' (?0) in module `\fsmControl' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$632 [3] = \state [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$638' (?0) in module `\fsmControl' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$632 [4] = \state [4]'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$650' in module `fsmControl'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$790' (const_and) in module `\fsmControl' with constant driver `$techmap$procmux$44.$and$<techmap.v>:434$490_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$789' (?0) in module `\fsmControl' with constant driver `$techmap$procmux$44.$reduce_or$<techmap.v>:441$491_Y = $techmap$procmux$44.$and$<techmap.v>:434$489_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$791' (const_and) in module `\fsmControl' with constant driver `$techmap$procmux$112.$and$<techmap.v>:434$490_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$793' (?0) in module `\fsmControl' with constant driver `$techmap$procmux$112.$reduce_or$<techmap.v>:441$491_Y = $techmap$procmux$112.$and$<techmap.v>:434$489_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$794' (const_and) in module `\fsmControl' with constant driver `$techmap$procmux$72.$and$<techmap.v>:434$490_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$796' (?0) in module `\fsmControl' with constant driver `$techmap$procmux$72.$reduce_or$<techmap.v>:441$491_Y = $techmap$procmux$72.$and$<techmap.v>:434$489_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$805' (const_and) in module `\fsmControl' with constant driver `$techmap$procmux$149.$and$<techmap.v>:434$490_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$807' (?0) in module `\fsmControl' with constant driver `$techmap$procmux$149.$reduce_or$<techmap.v>:441$491_Y = $techmap$procmux$149.$and$<techmap.v>:434$489_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$812' (const_and) in module `\fsmControl' with constant driver `$techmap$procmux$180.$and$<techmap.v>:434$490_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$814' (?0) in module `\fsmControl' with constant driver `$techmap$procmux$180.$reduce_or$<techmap.v>:441$491_Y = $techmap$procmux$180.$and$<techmap.v>:434$489_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$819' (const_and) in module `\fsmControl' with constant driver `$techmap$procmux$190.$and$<techmap.v>:434$490_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$821' (?0) in module `\fsmControl' with constant driver `$techmap$procmux$190.$reduce_or$<techmap.v>:441$491_Y = $techmap$procmux$190.$and$<techmap.v>:434$489_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$826' (const_and) in module `\fsmControl' with constant driver `$techmap$procmux$200.$and$<techmap.v>:434$490_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$828' (?0) in module `\fsmControl' with constant driver `$techmap$procmux$200.$reduce_or$<techmap.v>:441$491_Y = $techmap$procmux$200.$and$<techmap.v>:434$489_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$833' (const_and) in module `\fsmControl' with constant driver `$techmap$procmux$213.$and$<techmap.v>:434$490_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$835' (?0) in module `\fsmControl' with constant driver `$techmap$procmux$213.$reduce_or$<techmap.v>:441$491_Y = $techmap$procmux$213.$and$<techmap.v>:434$489_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$840' (const_and) in module `\fsmControl' with constant driver `$techmap$procmux$229.$and$<techmap.v>:434$490_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$842' (?0) in module `\fsmControl' with constant driver `$techmap$procmux$229.$reduce_or$<techmap.v>:441$491_Y = $techmap$procmux$229.$and$<techmap.v>:434$489_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$847' (const_and) in module `\fsmControl' with constant driver `$techmap$procmux$248.$and$<techmap.v>:434$490_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$849' (?0) in module `\fsmControl' with constant driver `$techmap$procmux$248.$reduce_or$<techmap.v>:441$491_Y = $techmap$procmux$248.$and$<techmap.v>:434$489_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$897' (const_and) in module `\fsmControl' with constant driver `$techmap$procmux$282.$and$<techmap.v>:434$564_Y [3] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$856' (?0) in module `\fsmControl' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$854 [1] = $techmap$procmux$282.$and$<techmap.v>:434$563_Y [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$892' (const_and) in module `\fsmControl' with constant driver `$techmap$procmux$282.$and$<techmap.v>:434$565_Y [3] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$860' (?0) in module `\fsmControl' with constant driver `$techmap$procmux$282.$reduce_or$<techmap.v>:441$569_Y = $auto$simplemap.cc:127:simplemap_reduce$857'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$893' (const_and) in module `\fsmControl' with constant driver `$techmap$procmux$282.$and$<techmap.v>:434$565_Y [4] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$867' (?0) in module `\fsmControl' with constant driver `$techmap$procmux$282.$reduce_or$<techmap.v>:441$570_Y = $auto$simplemap.cc:127:simplemap_reduce$864'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$891' (const_and) in module `\fsmControl' with constant driver `$techmap$procmux$282.$and$<techmap.v>:434$565_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$874' (?0) in module `\fsmControl' with constant driver `$techmap$procmux$282.$reduce_or$<techmap.v>:441$568_Y = $auto$simplemap.cc:127:simplemap_reduce$871'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$895' (const_and) in module `\fsmControl' with constant driver `$techmap$procmux$282.$and$<techmap.v>:434$564_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$877' (?0) in module `\fsmControl' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$875 [1] = $techmap$procmux$282.$and$<techmap.v>:434$563_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$890' (1?) in module `\fsmControl' with constant driver `$techmap$procmux$282.$and$<techmap.v>:434$565_Y [1] = $procmux$114_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$894' (const_and) in module `\fsmControl' with constant driver `$techmap$procmux$282.$and$<techmap.v>:434$564_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$884' (?0) in module `\fsmControl' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$882 [1] = $techmap$procmux$282.$and$<techmap.v>:434$563_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$889' (const_and) in module `\fsmControl' with constant driver `$techmap$procmux$282.$and$<techmap.v>:434$565_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$888' (?0) in module `\fsmControl' with constant driver `$techmap$procmux$282.$reduce_or$<techmap.v>:441$566_Y = $auto$simplemap.cc:127:simplemap_reduce$885'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$929' (const_and) in module `\fsmControl' with constant driver `$techmap$procmux$355.$and$<techmap.v>:434$489_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$928' (0?) in module `\fsmControl' with constant driver `$techmap$procmux$355.$reduce_or$<techmap.v>:441$491_Y = $techmap$procmux$355.$and$<techmap.v>:434$490_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$933' (const_and) in module `\fsmControl' with constant driver `$techmap$procmux$376.$and$<techmap.v>:434$490_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$935' (?0) in module `\fsmControl' with constant driver `$techmap$procmux$376.$reduce_or$<techmap.v>:441$491_Y = $techmap$procmux$376.$and$<techmap.v>:434$489_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$650' (01?) in module `\fsmControl' with constant driver `$procmux$371_Y = $auto$simplemap.cc:168:logic_reduce$477'.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsmControl'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$709' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$741'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$707 [1] = $auto$simplemap.cc:127:simplemap_reduce$739 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$709' from module `\fsmControl'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$642' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$662'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$641 [0] = $auto$simplemap.cc:127:simplemap_reduce$661 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$642' from module `\fsmControl'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$622' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$741'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$620 [1] = $auto$simplemap.cc:127:simplemap_reduce$739 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$622' from module `\fsmControl'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$621' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$662'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$620 [0] = $auto$simplemap.cc:127:simplemap_reduce$661 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$621' from module `\fsmControl'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$460' is identical to cell `$auto$simplemap.cc:177:logic_reduce$474'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$458 [1] = $auto$simplemap.cc:168:logic_reduce$472 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$460' from module `\fsmControl'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$459' is identical to cell `$auto$simplemap.cc:177:logic_reduce$473'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$458 [0] = $auto$simplemap.cc:168:logic_reduce$472 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$459' from module `\fsmControl'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$811' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$804'.
    Redirecting output \Y: $techmap$procmux$149.$reduce_or$<techmap.v>:445$487_Y = $techmap$procmux$112.$reduce_or$<techmap.v>:445$487_Y
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$811' from module `\fsmControl'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$818' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$804'.
    Redirecting output \Y: $techmap$procmux$180.$reduce_or$<techmap.v>:445$487_Y = $techmap$procmux$112.$reduce_or$<techmap.v>:445$487_Y
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$818' from module `\fsmControl'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$825' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$804'.
    Redirecting output \Y: $techmap$procmux$190.$reduce_or$<techmap.v>:445$487_Y = $techmap$procmux$112.$reduce_or$<techmap.v>:445$487_Y
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$825' from module `\fsmControl'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$832' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$804'.
    Redirecting output \Y: $techmap$procmux$200.$reduce_or$<techmap.v>:445$487_Y = $techmap$procmux$112.$reduce_or$<techmap.v>:445$487_Y
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$832' from module `\fsmControl'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$839' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$804'.
    Redirecting output \Y: $techmap$procmux$213.$reduce_or$<techmap.v>:445$487_Y = $techmap$procmux$112.$reduce_or$<techmap.v>:445$487_Y
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$839' from module `\fsmControl'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$846' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$804'.
    Redirecting output \Y: $techmap$procmux$229.$reduce_or$<techmap.v>:445$487_Y = $techmap$procmux$112.$reduce_or$<techmap.v>:445$487_Y
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$846' from module `\fsmControl'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$853' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$804'.
    Redirecting output \Y: $techmap$procmux$248.$reduce_or$<techmap.v>:445$487_Y = $techmap$procmux$112.$reduce_or$<techmap.v>:445$487_Y
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$853' from module `\fsmControl'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$939' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$481'.
    Redirecting output \Y: $techmap$procmux$376.$reduce_or$<techmap.v>:445$487_Y = $auto$opt_reduce.cc:132:opt_mux$411
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$939' from module `\fsmControl'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$785' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$804'.
    Redirecting output \Y: $techmap$procmux$44.$reduce_or$<techmap.v>:445$487_Y = $techmap$procmux$112.$reduce_or$<techmap.v>:445$487_Y
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$785' from module `\fsmControl'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$802' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$804'.
    Redirecting output \Y: $techmap$procmux$72.$reduce_or$<techmap.v>:445$487_Y = $techmap$procmux$112.$reduce_or$<techmap.v>:445$487_Y
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$802' from module `\fsmControl'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$462' is identical to cell `$auto$simplemap.cc:177:logic_reduce$476'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$461 = $auto$simplemap.cc:168:logic_reduce$475
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$462' from module `\fsmControl'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$464' is identical to cell `$auto$simplemap.cc:177:logic_reduce$478'.
    Redirecting output \Y: $ne$fsm_Control.v:96$6_Y = $auto$simplemap.cc:168:logic_reduce$477
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$464' from module `\fsmControl'.
Removed a total of 18 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fsmControl..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fsmControl.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsmControl'.
Removed a total of 0 cells.

10.6. Executing OPT_RMDFF pass (remove dff with constant values).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsmControl..
  removing unused `$_NOT_' cell `$auto$simplemap.cc:206:simplemap_lognot$479'.

10.8. Executing OPT_EXPR pass (perform const folding).

10.9. Rerunning OPT passes. (Maybe there is more to do..)

10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fsmControl..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fsmControl.
Performed a total of 0 changes.

10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsmControl'.
Removed a total of 0 cells.

10.13. Executing OPT_RMDFF pass (remove dff with constant values).

10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsmControl..

10.15. Executing OPT_EXPR pass (perform const folding).

10.16. Finished OPT passes. (There is nothing left to do.)

11. Executing FLATTEN pass (flatten design).
No more expansions possible.

12. Executing OPT pass (performing simple optimizations).

12.1. Executing OPT_EXPR pass (perform const folding).

12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsmControl'.
Removed a total of 0 cells.

12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fsmControl..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fsmControl.
Performed a total of 0 changes.

12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fsmControl'.
Removed a total of 0 cells.

12.6. Executing OPT_RMDFF pass (remove dff with constant values).

12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fsmControl..

12.8. Executing OPT_EXPR pass (perform const folding).

12.9. Finished OPT passes. (There is nothing left to do.)

13. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFF (noninv, pins=3, area=18.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=18.00) is a direct match for cell type $_DFFSR_PPP_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFFSR_PNN_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_N_ from mapping for $_DFF_P_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFF _DFF_N_ (.C(~C), .D( D), .Q( Q));
    DFF _DFF_P_ (.C( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.C(~C), .D( D), .Q( Q), .R(~R), .S( 0));
    DFFSR _DFF_NN1_ (.C(~C), .D( D), .Q( Q), .R( 0), .S(~R));
    DFFSR _DFF_NP0_ (.C(~C), .D( D), .Q( Q), .R( R), .S( 0));
    DFFSR _DFF_NP1_ (.C(~C), .D( D), .Q( Q), .R( 0), .S( R));
    DFFSR _DFF_PN0_ (.C( C), .D( D), .Q( Q), .R(~R), .S( 0));
    DFFSR _DFF_PN1_ (.C( C), .D( D), .Q( Q), .R( 0), .S(~R));
    DFFSR _DFF_PP0_ (.C( C), .D( D), .Q( Q), .R( R), .S( 0));
    DFFSR _DFF_PP1_ (.C( C), .D( D), .Q( Q), .R( 0), .S( R));
    DFFSR _DFFSR_NNN_ (.C(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_NNP_ (.C(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPN_ (.C(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPP_ (.C(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNN_ (.C( C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNP_ (.C( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPN_ (.C( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPP_ (.C( C), .D( D), .Q( Q), .R( R), .S( S));
Mapping DFF cells in module `\fsmControl':
  mapped 36 $_DFF_P_ cells to \DFF cells.

14. Executing ABC pass (technology mapping using ABC).

14.1. Extracting gate netlist of module `\fsmControl' to `<abc-temp-dir>/input.blif'..
Extracted 253 gates and 303 wires to a netlist network with 48 inputs and 36 outputs.

14.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/cesar/Desktop/DigitalesII/FSMPrueba/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/home/cesar/Desktop/DigitalesII/FSMPrueba/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + dc2 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime -o 
ABC: + strash 
ABC: + dch -f 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

14.1.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       77
ABC RESULTS:               NOR cells:       64
ABC RESULTS:               NOT cells:       25
ABC RESULTS:        internal signals:      219
ABC RESULTS:           input signals:       48
ABC RESULTS:          output signals:       36
Removing temp directory.

15. Printing statistics.

=== fsmControl ===

   Number of wires:                367
   Number of wire bits:            585
   Number of public wires:          21
   Number of public wire bits:      63
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                202
     DFF                            36
     NAND                           77
     NOR                            64
     NOT                            25

   Chip area for this module: 1287.000000

Removed 0 unused cells and 205 unused wires.

16. Executing Verilog backend.
Dumping module `\fsmControl'.

End of script. Logfile hash: c209e6ffc6
CPU: user 0.65s system 0.01s, MEM: 14.32 MB total, 9.88 MB resident
Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-zWLHjG/yosys-0.7=. -fstack-protector-strong -fPIC -Os)
Time spent: 19% 14x opt_merge (0 sec), 19% 14x opt_expr (0 sec), ...
